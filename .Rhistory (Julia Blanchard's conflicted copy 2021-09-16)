vary<-optim_result
noCores <- detectCores() - 1 # keep a spare core
cl <- makeCluster(noCores, setup_timeout = 0.5)
setDefaultCluster(cl = cl)
clusterExport(cl, as.list(ls()))
clusterEvalQ(cl, {
library(mizerExperimental)
library(optimParallel)
})
# run the optimisation
optim_result <-optimParallel(par=vary,getErrorTime,params=params, dat = obsy, method   ="L-BFGS-B",lower=c(rep(3,12),rep(1e-3,12),3,1),upper= c(rep(15,12),rep(1,12),15,10),parallel=list(loginfo=TRUE, forward=TRUE))
optim_result <-optimParallel(par=vary,getErrorTime,params=params, dat = obsy, method   ="L-BFGS-B",lower=c(rep(3,12),rep(1e-3,12),3,1),upper= c(rep(15,12),rep(1,12),15,10),parallel=list(loginfo=TRUE, forward=TRUE))
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
simt <- project(params, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
# Each species yields through time
plotYieldGear(simt)
# Biomass through time
plotlyBiomass(simt)
#read in observed yield values (again need to update these data from ICES)
obsy <- as.matrix(read.csv("../../data-raw/catchesMat.csv")[1:73,])
rownames(obsy)<-obsy[,1]
obsy <-reshape2::melt(obsy[,-1])
names(obsy)<-c("time","sp","value")
plotFittedTime(simt,obsy)
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
# express effort in relative terms of calibrated "catchablity"
effort<-effort/HTM2_sim_optim3@params@species_params$catchability
simt <- project(params, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
# Each species yields through time
plotYieldGear(simt)
# Biomass through time
plotlyBiomass(simt)
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
simt <- project(params, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
# Each species yields through time
plotYieldGear(simt)
# Biomass through time
plotlyBiomass(simt)
#read in observed yield values (again need to update these data from ICES)
obsy <- as.matrix(read.csv("../../data-raw/catchesMat.csv")[1:73,])
rownames(obsy)<-obsy[,1]
obsy <-reshape2::melt(obsy[,-1])
names(obsy)<-c("time","sp","value")
plotFittedTime(simt,obsy)
plotFittedTime(simt,obsy,allSpecies=F,plotSpecies = "Cod",startyr=1847)
vary<-optim_result
noCores <- detectCores() - 1 # keep a spare core
cl <- makeCluster(noCores, setup_timeout = 0.5)
setDefaultCluster(cl = cl)
clusterExport(cl, as.list(ls()))
clusterEvalQ(cl, {
library(mizerExperimental)
library(optimParallel)
})
# run the optimisation
optim_result <-optimParallel(par=vary,getErrorTime,params=params, dat = obsy, method   ="L-BFGS-B",lower=c(rep(3,12),rep(1e-3,12),3,1),upper= c(rep(15,12),rep(1,12),15,10),parallel=list(loginfo=TRUE, forward=TRUE))
vary
vary<-optim_result$par
# run the optimisation
optim_result <-optimParallel(par=vary,getErrorTime,params=params, dat = obsy, method   ="L-BFGS-B",lower=c(rep(3,12),rep(1e-3,12),3,1),upper= c(rep(15,12),rep(1,12),15,10),parallel=list(loginfo=TRUE, forward=TRUE))
sim <- readRDS("optim_para_sim.RDS")
params<-sim@params
sim <- project(params, effort = 1, t_max = 200, dt=0.1,initial_n = sim@n[dim(sim@n)[1],,], initial_npp = sim@n[dim(sim@n)[1],])
sim <- project(params, effort = 1, t_max = 200, dt=0.1,initial_n = sim@n[dim(sim@n)[1],,], initial_npp = sim@n[dim(sim@n)[1],])
plot(sim)
plotSpectra(sim,power=2,total =T)
plotlyGrowthCurves(sim,percentage=T)
plotDiet(params,species="Cod")
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
# plot the inputs effort (=fishing moratility here)
long_effort<-melt(effort)
names(long_effort)<-c("time","sp","value")
ggplot(long_effort, aes(x=time, y=value, col=sp)) +
geom_line() +xlab("") + ylab("Fishing mortality [per yr]")
# Different way of plotting yields across species
biomass <- sweep(simt@n, 3, simt@params@w * simt@params@dw, "*")
params<-simt@params
effort<-simt@effort
f_gear<-getFMortGear(params,effort)
yield_species_gear <- apply(sweep(f_gear, c(1, 3, 4), biomass, "*"),
c(1, 2, 3), sum)
yield_species <-apply(yield_species_gear, c(1, 3), sum)
yield_frame <- melt(yield_species)
y<-yield_frame[yield_frame$time >= 1947,]
# stacked area chart
ggplot(y, aes(x=time, y=value/1e6, fill=sp)) +
geom_area() +xlab("") + ylab("Yield [tonnes/yr]")
#read saved sim object from previous example
sim <- readRDS("optim_para_sim.RDS")
params<-sim@params
#sim <- HTM2_sim_optim3
#params<-sim@params
# run model to equilibrium and plot results, with fishing.
# here an effort = 1 will equate to a fihsing mortality rate = 1 and uses the default knife-edge selectivity function
sim <- project(params, effort = 1, t_max = 200, dt=0.1,initial_n = sim@n[dim(sim@n)[1],,], initial_npp = sim@n[dim(sim@n)[1],])
plot(sim)
plotSpectra(sim,power=2,total =T)
plotlyGrowthCurves(sim,percentage=T)
plotDiet(params,species="Cod")
inter <- sim@params@interaction
species_params <- params@species_params
gear_params<-data.frame(species = species_params$species,
gear = species_params$species,
sel_func = "sigmoid_length",
l25 =  c(7.6, 9.8, 8.7, 10.1, 11.5, 19.8, 16.4, 19.8, 11.5,
19.1, 13.2, 35.3),
l50 = c(8.1, 11.8, 12.2, 20.8, 17.0, 29.0, 25.8, 29.0, 17.0,
24.3, 22.9, 43.6),
catchability = rep(1,dim(params@species_params)[1]),
initial_effort =params@species_params$catchability)
params <- newMultispeciesParams(species_params,
interaction = inter,
kappa = params@resource_params$kappa,
gear_params = gear_params)
#reset catchability to 1 as using effort as fishing mortality now
catcha<-getCatchability(params)
diag(catcha)<-1
params<-setParams(params,catchability = catcha)
# re-run to check it
sim <- project(params, effort = gear_params$initial_effort,t_max = 200, dt=0.1,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
plot(sim)
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
# plot the inputs effort (=fishing moratility here)
long_effort<-melt(effort)
names(long_effort)<-c("time","sp","value")
ggplot(long_effort, aes(x=time, y=value, col=sp)) +
geom_line() +xlab("") + ylab("Fishing mortality [per yr]")
simt <- project(params, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
# Each species yields through time
plotYieldGear(simt)
# Biomass through time
plotlyBiomass(simt)
# Different way of plotting yields across species
biomass <- sweep(simt@n, 3, simt@params@w * simt@params@dw, "*")
params<-simt@params
effort<-simt@effort
f_gear<-getFMortGear(params,effort)
yield_species_gear <- apply(sweep(f_gear, c(1, 3, 4), biomass, "*"),
c(1, 2, 3), sum)
yield_species <-apply(yield_species_gear, c(1, 3), sum)
yield_frame <- melt(yield_species)
y<-yield_frame[yield_frame$time >= 1947,]
# stacked area chart
ggplot(y, aes(x=time, y=value/1e6, fill=sp)) +
geom_area() +xlab("") + ylab("Yield [tonnes/yr]")
#read in observed yield values (again need to update these data from ICES)
obsy <- as.matrix(read.csv("../../data-raw/catchesMat.csv")[1:73,])
rownames(obsy)<-obsy[,1]
obsy <-reshape2::melt(obsy[,-1])
names(obsy)<-c("time","sp","value")
plotFittedTime(simt,obsy)
plotFittedTime(simt,obsy,allSpecies=F,plotSpecies = "Cod",startyr=1847)
optim_result<-readRDS("optim_para_time_result.RDS")
#put these new vals intospecies_params and go back to the top of this page to re-check the calibration
params@species_params$R_max<-10^optim_result$par[1:12]
params@species_params$erepro<-optim_result$par[13:24]
params@resource_params$kappa<-10^optim_result$par[25]
params@resource_params$r_pp<-optim_result$par[26]
params_opt <- setParams(params)
#re-run time-varying effort model tthough time with new erepro
sim_opt <- project(params_opt, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n_pp[200,])
#saveRDS(sim_opt,"sim_opt_time.RDS")
plotFittedTime(sim_opt,obsy)
plotFittedTime(sim_opt,obsy,allSpecies = F,plotSpecies = "Cod")
sim <- readRDS("optim_para_sim.RDS")
params<-sim@params
params@species_params
#read saved sim object from previous example
sim <- readRDS("optim_para_sim.RDS")
params<-sim@params
#using a saved model, different erepro and Rmax values compared to HTM2
#sim <- HTM2_sim_optim3
#params<-sim@params
# run model to equilibrium and plot results, with fishing.
# here an effort = 1 will equate to a fihsing mortality rate = 1 and uses the default knife-edge selectivity function
sim <- project(params, effort = 1, t_max = 200, dt=0.1,initial_n = sim@n[dim(sim@n)[1],,], initial_npp = sim@n[dim(sim@n)[1],])
plotSummary(sim)
library(mizerHowTo)
plotSummary(sim)
plotSummary(sim)
plot(sim)
plotGrowthCurves2(sim)
plot(sim)
plotSpectra(sim,power=2,total =T)
plotlyGrowthCurves(sim,percentage=T)
plotDiet(params,species="Cod")
library(mizerHowTo)
#get required packages and functions
library(mizerHowTo)
source("calibration_functions.R")
#read saved sim object from previous example
sim <- readRDS("optim_para_sim.RDS")
params<-sim@params
#using a saved model, different erepro and Rmax values compared to HTM2
#sim <- HTM2_sim_optim3
#params<-sim@params
# run model to equilibrium and plot results, with fishing.
# here an effort = 1 will equate to a fihsing mortality rate = 1 and uses the default knife-edge selectivity function
sim <- project(params, effort = 1, t_max = 200, dt=0.1,initial_n = sim@n[dim(sim@n)[1],,], initial_npp = sim@n[dim(sim@n)[1],])
plot(sim)
plotSpectra(sim,power=2,total =T)
plotlyGrowthCurves(sim,percentage=T)
plotDiet(params,species="Cod")
inter <- sim@params@interaction
species_params <- params@species_params
gear_params<-data.frame(species = species_params$species,
gear = species_params$species,
sel_func = "sigmoid_length",
l25 =  c(7.6, 9.8, 8.7, 10.1, 11.5, 19.8, 16.4, 19.8, 11.5,
19.1, 13.2, 35.3),
l50 = c(8.1, 11.8, 12.2, 20.8, 17.0, 29.0, 25.8, 29.0, 17.0,
24.3, 22.9, 43.6),
catchability = rep(1,dim(params@species_params)[1]),
initial_effort =params@species_params$catchability)
params <- newMultispeciesParams(species_params,
interaction = inter,
kappa = params@resource_params$kappa,
gear_params = gear_params)
#reset catchability to 1 as using effort as fishing mortality now
catcha<-getCatchability(params)
diag(catcha)<-1
params<-setParams(params,catchability = catcha)
# re-run to check it
sim <- project(params, effort = gear_params$initial_effort,t_max = 200, dt=0.1,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
plot(sim)
# read in stored fishing moratlity (here called effort) time series
effort<-readRDS("effortTime.RDS")
# plot the inputs effort (=fishing moratility here)
long_effort<-melt(effort)
names(long_effort)<-c("time","sp","value")
ggplot(long_effort, aes(x=time, y=value, col=sp)) +
geom_line() +xlab("") + ylab("Fishing mortality [per yr]")
simt <- project(params, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n[200,])
# Each species yields through time
plotYieldGear(simt)
# Biomass through time
plotlyBiomass(simt)
# Different way of plotting yields across species
biomass <- sweep(simt@n, 3, simt@params@w * simt@params@dw, "*")
params<-simt@params
effort<-simt@effort
f_gear<-getFMortGear(params,effort)
yield_species_gear <- apply(sweep(f_gear, c(1, 3, 4), biomass, "*"),
c(1, 2, 3), sum)
yield_species <-apply(yield_species_gear, c(1, 3), sum)
yield_frame <- melt(yield_species)
y<-yield_frame[yield_frame$time >= 1947,]
# stacked area chart
ggplot(y, aes(x=time, y=value/1e6, fill=sp)) +
geom_area() +xlab("") + ylab("Yield [tonnes/yr]")
#read in observed yield values (again need to update these data from ICES)
obsy <- as.matrix(read.csv("../../data-raw/catchesMat.csv")[1:73,])
rownames(obsy)<-obsy[,1]
obsy <-reshape2::melt(obsy[,-1])
names(obsy)<-c("time","sp","value")
plotFittedTime(simt,obsy)
plotFittedTime(simt,obsy,allSpecies=F,plotSpecies = "Cod",startyr=1847)
optim_result<-readRDS("optim_para_time_result.RDS")
#put these new vals intospecies_params and go back to the top of this page to re-check the calibration
params@species_params$R_max<-10^optim_result$par[1:12]
params@species_params$erepro<-optim_result$par[13:24]
params@resource_params$kappa<-10^optim_result$par[25]
params@resource_params$r_pp<-optim_result$par[26]
params_opt <- setParams(params)
#re-run time-varying effort model tthough time with new erepro
sim_opt <- project(params_opt, effort = effort,initial_n = sim@n[200,,], initial_npp = sim@n_pp[200,])
#saveRDS(sim_opt,"sim_opt_time.RDS")
plotFittedTime(sim_opt,obsy)
plotFittedTime(sim_opt,obsy,allSpecies = F,plotSpecies = "Cod")
plotYield(sim_opt,obsy,allSpecies = F,plotSpecies = "Cod")
plotYield(sim_opt,obsy,allSpecies = F)
library(usethis)
create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
# make one gear per species so we can vary the effort per species
gear <- gear_params(sim@params)
library(mizerHowTo)
sim <- readRDS("data/HTM0_sim1.RDS")
sim <- readRDS("data/HTM0_sim1.RDS")
library(mizerHowTo)
getwd()
sim <- readRDS("data/HTM0_sim1.RDS")
HTM0_sim1 <- readRDS("~/Dropbox/HOW TO mizer/Course/HowTo/data/HMT0_sim1.RDS")
library(mizerHowTo)
sim <- readRDS("data/HTM0_sim1.RDS")
library(mizerHowTo)
sim <- readRDS("data/HTM0_sim1.RDS")
sim <- readRDS("inst/extdata/HTM0_simtime.RDS")
sim <- readRDS("inst/extdata/HTM0_simtime.RDS")
plot(sim)
library(mizerHowTo)
library(mizerExperimental)
sim <- readRDS("inst/extdata/HTM0_simtime.RDS")
library(mizerHowTo)
library(mizerExperimental)
sim <- readRDS("inst/extdata/HTM0_simtime.RDS")
library(mizerHowTo)
library(mizerExperimental)
load("data/HTM0_sim.rda")
getwd()
load("/data/HTM0_sim.rda")
load("HTM0_sim.rda")
load(HTM0_sim.rda)
load(file="data/HTM0_sim.rda")
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM1_sim.rda")
HTM0_sim.rda
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
plot(sim)
plot(sim_opt)
plotFittedTime(simt,obsy)
knitr::opts_chunk$set(echo = TRUE)
gear_params<-data.frame(species = species_params$species,
gear = species_params$species,
sel_func = "sigmoid_length",
l25 =  c(7.6, 9.8, 8.7, 10.1, 11.5, 19.8, 16.4, 19.8, 11.5,
19.1, 13.2, 35.3),
l50 = c(8.1, 11.8, 12.2, 20.8, 17.0, 29.0, 25.8, 29.0, 17.0,
24.3, 22.9, 43.6),
catchability = rep(1,dim(species_params)[1]),
initial_effort =species_params$catchability)
plot_dat <- NULL
for(iScenario in 1:4)
{
switch(iScenario,
"1" = {ieffort = c(1,1,1,1,1,1,1,1,2,2,2,2)
scenario_name = "overfishing big"},
"2" = {ieffort = c(2,2,2,2,1,1,1,1,1,1,1,1)
scenario_name = "overfishing_small"},
"3" = {ieffort = c(0,0,0,0,0,0,0,0,1,1,1,1)
scenario_name = "big_only"},
"4" = {ieffort = c(2,2,2,2,0,0,0,0,1,1,1,1)
scenario_name = "medium_safe"},
{}
)
sim <- project(sim@params, effort = ieffort, t_max = 50)
fDat <- plotFMort(sim, return_data = T)
fDat$scenario <- scenario_name
fDat$type <- "Fishing mortality"
sDat <- plotSpectra(sim, return_data = T)
sDat <- sDat[[1]]
sDat$scenario <- scenario_name
sDat$type <- "Size Spectrum"
sDat$value <- log10(sDat$value)
plot_dat <- rbind(plot_dat,fDat,sDat)
}
# Optional
# adjust Rmax and/or reproductive efficiency to examine whether improved steady state is achievable that way
library(shiny) # no need if runtime = shiny is in the YAML
# runApp("shiny-equilibrium")
# is there a way to save the final chosen values?
params_shiny <- sim@params
library(mizerHowTo)
library(mizerExperimental)
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
plotYieldGear(sim_opt)
source("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/calibration_fucntions.R")
source("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/calibration_functions.R")
library(mizerHowTo)
library(mizerExperimental)
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
source("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/calibration_functions.R")
sim<-sim_opt
rm(sim_opt)
plotFittedTime(sim)
plotFittedTime
#read in observed yield values (again need to update these data from ICES)
obsy <- as.matrix(read.csv("../../data-raw/catchesMat.csv")[1:73,])
rownames(obsy)<-obsy[,1]
obsy <-reshape2::melt(obsy[,-1])
names(obsy)<-c("time","sp","value")
obsy
save(obsy,"catches_observed.rda"")
save(obsy,"catches_observed.rda")
save(obsy,file="catches_observed.rda")
load("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/catches_observed.rda")
plotFittedTime(sim,obsy=catches_observed)
load("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/catches_observed.rda")
load("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/catches_observed.rda")
plotFittedTime(sim,obsy=obsy)
params<-sim@params
params_unfished<-setFishing(effort=0)
params<-sim@params
params_unfished<-setFishing(params,effort=0)
params<-sim@params
params_unfished<-setFishing(params,effort=0)
sim_unfished(params_unfished)
params<-sim@params
params_unfished<-setFishing(params,effort=0)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
plotlyBiomass(sim)
plotlyBiomass(sim,start_time = 1950)
params@effort
sim@effort
effort<-sim@effort
effor_unfished[]<-0
effort_unfished<-sim@effort
effort_unfished[]<-0
params<-sim@params
params_unfished<-setFishing(params,effort_unfished=0)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
effort_unfished<-sim@effort
effort_unfished[]<-0
params<-sim@params
params_unfished<-setFishing(params,effort_unfished)
effort_unfished<-sim@effort
effort_unfished<-0
params<-sim@params
params_unfished<-setFishing(params,effort_unfished)
effort_unfished<-sim@effort
effort_unfished<-0
params<-sim@params
params_unfished<-setFishing(params,effort=effort_unfished)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
params_unfished<-setFishing(params,effort=effort_unfished)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
sim@effort
effort_unfished
effort_unfished[]<-0
effort_unfished
params_unfished<-setFishing(params,effort=effort_unfished)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
params_unfished<-setFishing(params,effort=effort_unfished)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
bio_unfished<-getBiomass(sim_unfished)
bio_fished<-getBiomass(sim)
bio_fished
bio_unfished<-getBiomass(sim_unfished)
bio_fished<-getBiomass(sim)
ratio<-bio_fished/bio_unfished
bio_unfished<-getBiomass(sim_unfished)[100,]
bio_fished
dim(bio_fished)
bio_fished<-getBiomass(sim)["2017",]
ratio<-bio_fished/bio_unfished
ratio
ggplot(ratio, aes(x=species, y=ratio, fill=species))+
geom_bar(stat="identity", color="black")+
theme_minimal()
ggplot(ratio, aes(x=species, y=ratio))+
theme_minimal()
ratio
barplot(ratio)
bio_fished/bio_unfished
bio_unfished<-getBiomass(sim_unfished)[100,]
bio_fished<-getBiomass(sim)["2017",]
ratio<-bio_fished/bio_unfished
barplot(ratio)
abline(1,0)
bio_unfished<-getBiomass(sim_unfished)[100,]
bio_fished<-getBiomass(sim)["2017",]
ratio<-bio_fished/bio_unfished
barplot(ratio)
abline(1,0)
bio_unfished<-getBiomass(sim_unfished)[100,]
bio_fished<-getBiomass(sim)["2017",]
ratio<-bio_fished/bio_unfished
barplot(ratio)
abline(1,0)
abline(0.1,0)
bio_unfished<-getBiomass(sim_unfished)[100,]
bio_fished<-getBiomass(sim)["2017",]
ratio<-bio_fished/bio_unfished
barplot(ratio)
abline(1,0)
abline(0.1,0,col="red")
library(mizerHowTo)
library(mizerExperimental)
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
source("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/calibration_functions.R")
sim<-sim_opt
rm(sim_opt)
params_unfished<-setFishing(params,effort=0)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
lotDiet(sim_unfished)
plotDiet(sim_unfished)
plotDiet(params_unfished)
plotDiet2(params_unfished)
params_unfished<-setFishing(params,effort=0)
sim_unfished<-project(params_unfished)
plotlyBiomass(sim_unfished)
plotDiet2(params_unfished)
plotDiet2(sim_unfished)
readSim("HTM0_sim.rda")
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
sim<-sim_opt
rm(sim_opt)
load("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/catches_observed.rda")
plotFittedTime(sim,obsy=obsy)
library(tidyverse)
library(mizerHowTo)
remotes::install_github("sizespectrum/mizerExperimental")
library(mizerExperimental)
library(tidyverse)
# can this be a short cut:
load("~/Dropbox/HOW TO mizer/Course/HowTo/data/HTM0_sim.rda")
source("~/Dropbox/HOW TO mizer/Course/HowTo/inst/HTM3/calibration_functions.R")
sim<-sim_opt
rm(sim_opt)
